---
format: 
  html: default
title: "Instagram Stories"
date: 2023-11-13
author:
  - name: Michael Achmann-Denkler
    id: ma
    orcid: 0000-0002-4754-7842
    email: michael.achmann@informatik.uni-regensburg.de
license: CC BY
notebook-view:
  - notebook: ../notebooks/firebase-interface-notebook.ipynb
    title: "Firebase Interface Notebook"
    url: https://github.com/michaelachmann/social-media-lab/blob/main/notebooks/2023_11_07_Firebase_Interface.ipynb
---

Instagram stories, characterized by their ephemeral nature, expire after 24 hours. Therefore, it's crucial to collect them in a timely manner, as retrospective data collection is not an option with this format. There are two feasible methods: Instaloader and Zeeschuimer-F. Additionally, commercial tools such as [4k Stogram](https://www.4kdownload.com/de/products/stogram-2) are also available.

![A screenshot of stories by @tagesschau opened in the firefox browser](/images/stories-screenshot.png)

Overall, the ephemeral nature of stories necessitates our continuous monitoring and data collection from our targeted profiles. To ensure that we capture **every** story item, I recommend collecting stories twice daily, approximately 12 hours apart. This method accounts for potential inaccuracies in timing, as the intervals overlap. Data can be gathered manually or through computational means. The manual approach, especially in conjunction with Zeeschuimer-F, is preferable as it does not violate the Terms of Service (TOS). For this method, we would install the plugin and view all stories in our browser twice daily. Alternatively, using Instaloader involves simply initiating the command and waiting for the software to gather all the data. Optimally, we could utilize tools like [Cron](https://de.wikipedia.org/wiki/Cron) to automate this process.


## Instaloader
Instaloader for Stories operates in a manner akin to [collecting Posts](ig-posts.qmd#instaloader). Initially, the package must be installed:
```python
!pip -q install instaloader
```

Unlike the method outlined in the previous tutorial, I advise employing the command-line interface of Instaloader for collecting stories. To do this, open a terminal and execute the command below:

```bash
instaloader --login your.profile.name --dirname-pattern ig_stories/{profile} :stories --no-compress-json
```

Executing this command generates a dedicated subfolder within `ig_stories` for each user followed by your profile. It downloads the metadata, images, and videos of each story. The metadata is saved in a `JSON` file. While these files are typically xz-compressed by default, using the `--no-compress-json` option prevents this compression. Subsequently, the `JSON` files can be imported into a pandas DataFrame in Python.

This process can be automated, for example, by utilizing a `bash` script in conjunction with `cron`:


```bash
#!/bin/bash

# Generate a random number of seconds between 0 and 3600 (1 hours)
sleep_duration=$(( RANDOM % 3600 ))

# Print the sleep duration
echo "Sleeping for $sleep_duration seconds..."

# Sleep for the random duration
sleep $sleep_duration

# Run Instaloader command to download the latest Instagram stories
instaloader --login your.profile.name --dirname-pattern ~/ig_stories/{profile} :stories  --no-compress-json

# Add more script to check for success and send alerts in case of error
```

Start cron by entering `crontab -e` on your terminal and add a line pointing to the `bash` script, e.g.:

```bash
* 8,20 * * * /path/to/your/script.sh >/dev/null 2>&1
```


<div class="pros-cons-container">

<div class="pros">
### Pros:
<ul class="pro-con-list pro">
<li>Very easy to automate</li>
<li>Collects all data: metadata, images, videos</li>
</ul>
</div>

<div class="cons">
### Cons:
<ul class="pro-con-list con">
<li>Possibly against the TOS</li>
<li>Rate Limits</li>
<li>Blocked Accounts (*very* quickly)</li>
</ul>
</div>

</div>


## Zeeschuimer-F
![](/images/zeeschuimer-f.png)

This method is based on the [Zeeschuimer Firefox Plugin](https://github.com/digitalmethodsinitiative/zeeschuimer). I have adapted the original plugin to create Zeeschuimer-F, which is specifically tailored for collecting Instagram stories and interfacing with the [Zeeschuimer-Firebase-Backend](https://github.com/michaelachmann/zeeschuimer-firebase-backend) for real-time data collection. You can find [Zeeschuimer-F on GitHub](https://github.com/michaelachmann/zeeschuimer-f). To use it, download the latest version via [Firefox](https://www.mozilla.org/firefox/new/) and install the plugin. For our seminar, I'll provide a backend instance; refer to the `README.md` on GitHub for guidance on setting up your own instance on Firebase. **Credentials for our seminar will be distributed through GRIPS**. Follow these steps to download stories using Zeeschuimer-F:

1. Download and install the plugin.
2. Create a project on the backend (via Notebook).
3. Configure the plugin.
4. Regularly view stories in Firefox to collect them.
5. Download the collected data (via Notebook).

### Plugin Installation
To install the plugin, download the latest release `.xpi` file from [GitHub](https://github.com/michaelachmann/zeeschuimer-f) using Firefox. After downloading, click on the file in Firefox and confirm the installation of the extension.

![Screenshot of Firefox with the open extensions menu](/images/plugins.png)

Verify the extension's installation by checking the right-hand menu in Firefox. We will return to the browser shortly.


---

### The Firebase Interface Notebook

{{< embed ../notebooks/firebase-interface-notebook.ipynb echo=true >}}


<div class="pros-cons-container">

<div class="pros">
### Pros:
<ul class="pro-con-list pro">
<li>We do not infringe the TOS</li>
<li>Collects all data: metadata, images, videos</li>
<li>The firebase backend handles alert emails</li>
</ul>
</div>

<div class="cons">
### Cons:
<ul class="pro-con-list con">
<li>Current solution relies on the firebase backend</li>
<li>We need to manually browse the stories twice a day (*can* be automated using [Selenium](https://www.selenium.dev/))</li>
<li>Data is collected on firebase storage, we need to export to use it</li>
</ul>
</div>

</div>


## Conclusion

This page offers an overview of two methods for collecting ephemeral Instagram stories, which are crucial to capture in real time due to their 24-hour expiration period. The first method, [instaloader](#instaloader), is theoretically effective. However, similar to the case with posts, Instagram accounts utilizing Instaloader face a high risk of being banned swiftly. 

The second approach adopts a less invasive strategy. It involves capturing the data transmitted to the browser while viewing stories on Instagram, and then transferring the metadata to our Firebase project. Upon the addition of a new story to the database, the backend initiates the download of videos and images for that story.

To facilitate this process, I have provided a notebook for project creation, a manual for configuring the plugin, and additional code to export the captured stories via a Jupyter notebook.

